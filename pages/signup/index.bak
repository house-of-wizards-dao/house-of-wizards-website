import DefaultLayout from "@/layouts/default";
import React, { useState, useEffect, useRef } from "react";
import { Container, Form, FormGroup, FormLabel, FormControl} from "react-bootstrap";
import { useUser,useSupabaseClient } from "@supabase/auth-helpers-react";
import { v4 as uuidv4 } from "uuid";
import { Button } from "@nextui-org/button";
import { Input } from "@nextui-org/input";
import {EyeFilledIcon} from "../../components/EyeFilledIcon";
import {EyeSlashFilledIcon} from "../../components/EyeSlashFilledIcon";
import { PencilIcon } from "@heroicons/react/24/solid";
import { FaTwitter, FaDiscord, FaGlobe } from 'react-icons/fa';
import Image from "next/image";

  const CDNURL = "https://czflihgzksfynoqfilot.supabase.co/storage/v1/object/public/images/";
  const CDNURLS = "https://czflihgzksfynoqfilot.supabase.co/storage/v1/object/public/avatars/";
  const CDNURLSS = "https://czflihgzksfynoqfilot.supabase.co/storage/v1/object/public/files/";

export default function IndexPage() {
  const [ email, setEmail ] = useState("");
  const [name, setName] = useState("");
  const [password, setPassword] = useState("");
  const [ images, setImages ] = useState([]);
  const user = useUser();
  const supabase = useSupabaseClient();
  const [activeTab, setActiveTab] = useState("signin");
  const [selectedFile, setSelectedFile] = useState(null);
  const [imageDescription, setImageDescription] = useState("");
  const [userDescription, setUserDescription] = useState("");
  const [isEditingDescription, setIsEditingDescription] = useState(false);
  const [isEditingSocial, setIsEditingSocial] = useState(false);
  const [avatar, setAvatar] = useState(null);
  const [twitter, setTwitter] = useState(user?.twitter || '');
  const [discord, setDiscord] = useState(user?.discord || '');
  const [website, setWebsite] = useState(user?.website || '');
  const fileInputRef = useRef(null);
  const [ files, setFiles ] = useState([]);

  const [isVisible, setIsVisible] = React.useState(false);

  const toggleVisibility = () => setIsVisible(!isVisible);

  async function getImages() {
    const { data, error } = await supabase
      .storage
      .from('images')
      .list(user?.id + "/", {
        limit: 100,
        offset: 0,
        sortBy: {column: "name", order: "asc"}
      });
  
    if(data !== null) {
      // Fetch descriptions for these images
      const { data: descData, error: descError } = await supabase
        .from('image_descriptions')
        .select('*')
        .eq('user_id', user.id);
  
      if (descError) {
        console.error("Error fetching descriptions:", descError);
      } else {
        // Combine image data with descriptions
        const imagesWithDesc = data.map(img => ({
          ...img,
          description: descData.find(desc => desc.image_name === img.name)?.description || ''
        }));
        setImages(imagesWithDesc);
      }
    } else {
      alert("Error loading images");
      console.log(error)
    }
  }

  async function getFiles() {
    const { data, error } = await supabase
      .storage
      .from('files')
      .list(user?.id + "/", {
        limit: 100,
        offset: 0,
        sortBy: {column: "name", order: "asc"}
      });
  
    if (error) {
      console.log("Error loading files:", error);
      return;
    }
  
    // Fetch descriptions for these files
    const { data: descData, error: descError } = await supabase
      .from('file_descriptions')
      .select('*')
      .eq('user_id', user.id);
  
    if (descError) {
      console.error("Error fetching descriptions:", descError);
    } else {
      // Combine file data with descriptions
      const filesWithDesc = data.map(file => ({
        ...file,
        description: descData.find(desc => desc.file_name === file.name)?.description || '',
        fileType: descData.find(desc => desc.file_name === file.name)?.file_type || ''
      }));
      setFiles(filesWithDesc);
    }
  }

  useEffect(() => {
    if(user) {
      getImages();
      async function refreshUserData() {
        const { data: { user: freshUser } } = await supabase.auth.getUser();
        setAvatar(freshUser.user_metadata.avatar_url);
        // Fetch user profile data including description, socials, and avatar
        const { data: profileData, error } = await supabase
          .from('profiles')
          .select('description, twitter, discord, website, avatar_url')
          .eq('id', user.id)
          .single();
        
        if (error) {
          console.error("Error fetching user profile:", error);
        } else {
          setUserDescription(profileData.description || "");
          setTwitter(profileData.twitter || "");
          setDiscord(profileData.discord || "");
          setWebsite(profileData.website || "");
          setAvatar(profileData.avatar_url || "");
        }
      }
      refreshUserData();
    }
  }, [user]);
  
  async function signInWithEmail() {
    const { data, error } = await supabase.auth.signInWithPassword({
      email: email,
      password: password,
    });
  
    if (error) {
      alert("Error signing in: " + error.message);
    } else {
      console.log("Signed in:", data);
      
      // Update the profile
      const { error: updateError } = await supabase
        .from('profiles')
        .upsert({ id: data.user.id, email: email }, { onConflict: 'id' });
      
      if (updateError) {
        console.error("Error updating profile:", updateError);
      }
      
      const { data: { user } } = await supabase.auth.getUser();
    }
  }
  
  async function signUpWithEmail() {
    const { data, error } = await supabase.auth.signUp({
      email: email,
      password: password,
      options: {
        data: {
          name: name
        }
      }
    });
  
    if (error) {
      alert("Error signing up: " + error.message);
    } else {
      // Insert the user into the profiles table
      const { error: profileError } = await supabase
        .from('profiles')
        .insert({ id: data.user.id, name: name, email: email });
      
      if (profileError) {
        console.error("Error creating profile:", profileError);
      }
      
      alert("Signed up successfully! Please check your email for verification.");
    }
  }

  async function signOut() {
    const { error } = await supabase.auth.signOut();
  }
  
  async function updateUserDescription() {
    const { error } = await supabase
      .from('profiles')
      .update({ description: userDescription })
      .eq('id', user.id);
  
    if (error) {
      console.error("Error updating user description:", error);
      alert("Failed to update description");
    } else {
      alert("Description updated successfully");
    }
  }
  
  async function handleAvatarUpload(event) {
    const file = event.target.files[0];
    const fileExt = file.name.split('.').pop();
    const fileName = `${user.id}_avatar.${fileExt}`;
    const filePath = `${user.id}/${fileName}`;
  
    let { error: uploadError } = await supabase.storage
      .from('avatars')
      .upload(filePath, file, { upsert: true });
  
    if (uploadError) {
      console.error('Error uploading avatar:', uploadError);
      alert('Error uploading avatar');
    } else {
      setAvatar(filePath);
      updateProfile({ avatar: filePath });
    }
  }
  

  async function updateProfile({ avatar }) {
    try {
      const { error } = await supabase
        .from('profiles')
        .update({ avatar_url: avatar })
        .eq('id', user.id);
  
      if (error) throw error;
      alert('Profile updated!');
    } catch (error) {
      console.error('Error updating profile:', error);
      alert('Error updating profile');
    }
  }

  async function deleteContent(item) {
    const isImage = item.bucket === 'images';
    const bucket = isImage ? 'images' : 'files';
    const { data, error } = await supabase
      .storage
      .from(bucket)
      .remove([`${user.id}/${item.name}`]);
  
    if (error) {
      console.error("Error deleting file:", error);
      alert("Error deleting file");
    } else {
      // Remove the item from the appropriate state
      if (isImage) {
        setImages(prevImages => prevImages.filter(image => image.name !== item.name));
      } else {
        setFiles(prevFiles => prevFiles.filter(file => file.name !== item.name));
      }
  
      // Delete the description
      const { error: descError } = await supabase
        .from(isImage ? 'image_descriptions' : 'file_descriptions')
        .delete()
        .match({ user_id: user.id, [isImage ? 'image_name' : 'file_name']: item.name });
  
      if (descError) {
        console.error("Error deleting description:", descError);
      }
  
      // Delete the likes (if you have this functionality)
      const { error: likesError } = await supabase
        .from('content_likes')
        .delete()
        .match({ content_id: item.name, user_id: user.id, bucket: bucket });
  
      if (likesError) {
        console.error("Error deleting likes:", likesError);
      }
  
      alert("File deleted successfully");
    }
  }

  useEffect(() => {
    if(user) {
      getFiles();
      async function refreshUserData() {
        const { data: { user: freshUser } } = await supabase.auth.getUser();
        setAvatar(freshUser.user_metadata.avatar_url);
        // Fetch user profile data including description, socials, and avatar
        const { data: profileData, error } = await supabase
          .from('profiles')
          .select('description, twitter, discord, website, avatar_url')
          .eq('id', user.id)
          .single();
        
        if (error) {
          console.error("Error fetching user profile:", error);
        } else {
          setUserDescription(profileData.description || "");
          setTwitter(profileData.twitter || "");
          setDiscord(profileData.discord || "");
          setWebsite(profileData.website || "");
          setAvatar(profileData.avatar_url || "");
        }
      }
      refreshUserData();
    }
  }, [user]);
  
  async function updateSocialMedia() {
    const { error } = await supabase
      .from('profiles')
      .update({ twitter, discord, website })
      .eq('id', user.id);
  
    if (error) {
      console.error("Error updating social media:", error);
      alert("Failed to update social media");
    } else {
      alert("Social media updated successfully");
      setIsEditingSocial(false);
    }
  }
  

  async function handleUpload() {
    if (!selectedFile) {
      alert("Please select a file first");
      return;
    }
  
    const fileName = uuidv4();
    const fileExt = selectedFile.name.split('.').pop();
    const fullFileName = `${fileName}.${fileExt}`;
    
    const { data, error } = await supabase
      .storage
      .from('files')
      .upload(user.id + "/" + fullFileName, selectedFile)
    
    if(data) {
      // Add the description to a separate table
      const { error: descError } = await supabase
        .from('file_descriptions')
        .insert({ 
          user_id: user.id, 
          file_name: fullFileName, 
          description: imageDescription,
          file_type: selectedFile.type
        });
  
      if (descError) {
        console.error("Error saving description:", descError);
      }
  
      getFiles();
      setSelectedFile(null);
      setImageDescription("");
    } else {
      console.log(error);
    }
  }

  function handleFileSelect(e) {
    setSelectedFile(e.target.files[0]);
  }

  return (
    <DefaultLayout>
      <Container className="flex flex-col items-center justify-center gap-6 h-full">
      {user === null ?
        <>
        <div className="w-full h-screen flex flex-col items-center justify-center gap-6 ">
        <h1 className="font-pop font-bold text-foreground text-3xl">Forgotten Artist</h1>
        <div className="flex flex-row gap-6">
          <Button
              className="font-pop font-medium text-white text-md bg-[#242424]" 
            /* variant={activeTab === "signin" ? "primary" : "secondary"}  */
            onClick={() => setActiveTab("signin")}
          >
            Sign In
          </Button>
          <Button
            className="font-pop font-medium text-white text-md bg-[#7d7d7d]"  
            onClick={() => setActiveTab("signup")}
          >
            Register
          </Button>
        </div>
        {activeTab === "signin" ? (
          /* Sign In */
            <div className="flex flex-col items-center justify-center gap-6 sm:w-[500px] w-full">
            <div className="flex flex-col w-full flex-wrap md:flex-nowrap gap-4">
                <Input type="email" label="Email" placeholder="Enter your email"  onChange={(e) => setEmail(e.target.value)}/>
                <Input
                label="Password"
                variant="bordered"
                placeholder="Enter your password"
                endContent={
                  <button className="focus:outline-none" type="button" onClick={toggleVisibility} aria-label="toggle password visibility">
                    {isVisible ? (
                      <EyeSlashFilledIcon className="text-2xl text-default-400 pointer-events-none" />
                    ) : (
                      <EyeFilledIcon className="text-2xl text-default-400 pointer-events-none" />
                    )}
                  </button>
                }
                type={isVisible ? "text" : "password"}
                className=""
                onChange={(e) => setPassword(e.target.value)}
              />
              </div>
            
              <Button className="font-pop font-medium text-md bg-[#242424] text-foreground" color="success" onClick={() => signInWithEmail()}>
                Sign In
              </Button>
            </div>
        ) : (
            /* Sign Up */
          <div className="flex flex-col items-center justify-center gap-6 sm:w-[500px] w-full">
            <Input type="name" label="Name" placeholder="Enter your name"  onChange={(e) => setName(e.target.value)}/>
            <Input type="email" label="Email" placeholder="Enter your name"  onChange={(e) => setEmail(e.target.value)}/>
            <Input
              label="Password"
              variant="bordered"
              placeholder="Enter your password"
              endContent={
                <button className="focus:outline-none" type="button" onClick={toggleVisibility} aria-label="toggle password visibility">
                  {isVisible ? (
                    <EyeSlashFilledIcon className="text-2xl text-default-400 pointer-events-none" />
                  ) : (
                    <EyeFilledIcon className="text-2xl text-default-400 pointer-events-none" />
                  )}
                </button>
              }
              type={isVisible ? "text" : "password"}
              className=""
              onChange={(e) => setPassword(e.target.value)}
            />
            <Button className="font-pop font-medium text-md bg-[#7d7d7d] text-white" color="primary" onClick={() => signUpWithEmail()}>
              Register
            </Button>
          </div>
        )}
        </div>
        </>
      :
        <>
          {/* Your profile */}
          <div className="w-full flex flex-col">
            {/* Avater and Header Profile */}
            <div className="flex flex-row justify-between">
              <div className="flex flex-row gap-6">
                <div className="">
                  {user && (
                    <div className="relative flex flex-col items-center">
                      {avatar ? (
                        <img
                          src={`${CDNURLS}/${avatar}`}
                          alt="Avatar"
                          className="w-24 h-24 rounded-full object-cover"
                        />
                      ) : (
                        <div className="w-24 h-24 rounded-full bg-gray-300 flex items-center justify-center">
                          <span className="text-gray-600">No Avatar</span>
                        </div>
                      )}
                      <input
                        type="file"
                        accept="image/*"
                        onChange={handleAvatarUpload}
                        ref={fileInputRef}
                        className="hidden"
                      />
                      <button
                        onClick={() => fileInputRef.current.click()}
                        className="absolute bottom-0 right-0 bg-white rounded-full p-1"
                      >
                        <PencilIcon className="h-4 w-4 text-background" />
                      </button>
                    </div>
                  )}
                </div>
                <div className="flex flex-col justify-center">
                  <h1 className="font-pop text-foreground font-bold sm:text-3xl text-2xl">Your Profile</h1>
                  <p className="text-grey font-pop text-md sm:block hidden">{user.email} {user.name}</p>
                </div>
              </div>

              <div className="flex justify-center items-center">
                <Button color="danger" className="w-fit font-pop sm:text-md text-sm font-bold" onClick={() => signOut()}>Sign Out</Button>
              </div>
            </div>

            {/* Description and Socials */}
            <div className="mt-4 flex flex-col gap-1">
              {isEditingDescription ? (
                <div className="flex flex-col sm:w-[400px] w-full">
                  <Input
                    className="w-full mt-3 font-pop"
                    type="text"
                    label="User Description"
                    placeholder="Enter a description about yourself"
                    value={userDescription}
                    onChange={(e) => setUserDescription(e.target.value)}
                  />
                  <div className="flex justify-end mt-2 gap-2">
                    <Button color="success" className="font-pop" onClick={() => {updateUserDescription(); setIsEditingDescription(false);}}>Save</Button>
                    <Button color="danger" className="font-pop" onClick={() => setIsEditingDescription(false)}>Cancel</Button>
                  </div>
                </div>
              ) : (
                <div className="flex items-center">
                  <p className="text-foreground font-pop text-md mr-2">
                    {userDescription || "No description added yet"}
                  </p>
                  <button onClick={() => setIsEditingDescription(true)} className="bg-transparent border-none cursor-pointer">
                    <PencilIcon className="sm:h-4 sm:w-4 h-3 w-3 text-foreground" />
                  </button>
                </div>
              )}
            
              {isEditingSocial ? (
                <div className="flex flex-col sm:w-[400px] w-full max-w-md mt-4">
                  <Input
                    className="mt-3 font-pop"
                    type="text"
                    label="Twitter"
                    placeholder="Your Twitter username"
                    value={twitter}
                    onChange={(e) => setTwitter(e.target.value)}
                  />
                  <Input
                    className="mt-3 font-pop"
                    type="text"
                    label="Discord"
                    placeholder="Your Discord username"
                    value={discord}
                    onChange={(e) => setDiscord(e.target.value)}
                  />
                  <Input
                    className="mt-3 font-pop"
                    type="text"
                    label="Website"
                    placeholder="Your website URL"
                    value={website}
                    onChange={(e) => setWebsite(e.target.value)}
                  />
                  <div className="flex justify-end mt-2">
                    <Button color="success" className="ml-2 font-pop" onClick={updateSocialMedia}>Save</Button>
                    <Button color="danger" className="ml-2 font-pop" onClick={() => setIsEditingSocial(false)}>Cancel</Button>
                  </div>
                </div>
                ) : (
                <div className="flex flex-col">
                  <div className="flex flex-row gap-3">
                    <h1 className="font-pop text-md text-foreground">Socials</h1>
                    <button 
                      onClick={() => setIsEditingSocial(true)}
                      className="bg-transparent border-none cursor-pointer"
                    >
                      <PencilIcon className="sm:h-4 sm:w-4 h-3 w-3 text-foreground" />
                    </button>
                  </div>
                  <div className="flex sm:flex-row flex-col sm:space-x-4 mt-1">
                    {twitter && (
                      <a href={`https://twitter.com/${twitter}`} target="_blank" rel="noopener noreferrer" className="text-[#7d7d7d] font-pop text-md hover:text-foreground flex flex-row items-center gap-1">
                        <FaTwitter size={16}  className="text-foreground"/> {twitter}
                      </a>
                    )}
                    {discord && (
                      <span className="text-[#7d7d7d] font-pop text-md hover:text-foreground flex flex-row items-center gap-1" title={discord}>
                        <FaDiscord size={16} className="text-foreground"/> {discord}
                      </span>
                    )}
                    {website && (
                      <a href={website} target="_blank" rel="noopener noreferrer" className="text-[#7d7d7d] font-pop text-md hover:text-foreground flex flex-row items-center gap-1">
                        <FaGlobe size={16} className="text-foreground"/> {website}
                      </a>
                    )}
                  </div>
                </div>
              )}
            </div>
              
            {/* Handle File Upload */}       
            <div className="sm:w-[400px] w-full">
              <p className="mt-8 font-pop sm:text-sm text-md">Upload you art here!</p>
                <Input 
                  className="mt-3 font-pop" 
                  type="file" 
                  accept="image/png, image/jpeg, image/gif, video/mp4"  
                  onChange={(e) => handleFileSelect(e)}
                />
                <Input
                  className="mt-3 font-pop"
                  type="text"
                  placeholder="Enter image description"
                  value={imageDescription}
                  onChange={(e) => setImageDescription(e.target.value)}
                />
                <Button color="success" className="bg-[#7d7d7d] text-white font-medium mt-3 font-pop" onClick={handleUpload} disabled={!selectedFile}>Upload</Button>
            </div>

            {/* Show Image */}
            <div className="flex flex-row flex-wrap sm:gap-6 gap-3 mt-5 items-center">
              {images.map((image) => (
                <div className="flex flex-col items-center justify-between border-1.5 border-[#ededed] rounded-2xl w-fit p-4" key={CDNURL + user.id + "/" + image.name}>
                  <div className="sm:p-2 p-1">
                    <Image
                      src={CDNURL + user.id + "/" + image.name}
                      alt={image.description}
                      width={175}
                      height={175}
                      className="object-cover rounded-xl aspect-square"
                    />
                  </div>
                    <p className="text-foreground font-pop sm:text-md text-md">{image.description}</p>
                    <div className="p-3">
                      <Button className="text-white font-medium text-sm font-pop" color="danger" onClick={() => deleteContent({...image, bucket: 'images'})}>Delete Image</Button>
                    </div>
                  </div>
              ))}
              

              <div className="flex flex-row flex-wrap sm:gap-6 gap-3 mt-5 items-center">
                {files.map((file) => {
                  const fileUrl = `${CDNURLSS}${user.id}/${file.name}`;
                  return (
                    <div className="flex flex-col items-center justify-between border-1.5 border-[#242424] rounded-2xl p-2 w-fit hover:shadow-md" key={fileUrl}>
                      <div className="sm:p-2 p-1">
                        {file.fileType.startsWith('image/') ? (
                          <Image
                            src={fileUrl}
                            alt={file.description}
                            width={175}
                            height={175}
                            className="object-cover rounded-xl aspect-square"
                          />
                        ) : file.fileType.startsWith('video/') ? (
                          <video width="175" height="175" controls className="object-cover rounded-xl aspect-square">
                            <track kind="captions" src="captions.vtt" srcLang="en" label="English" />
                            <source src={fileUrl} type={file.fileType} />
                            Your browser does not support the video tag.
                          </video>
                        ) : null}
                      </div>
                      <p className="text-foreground font-pop sm:text-md text-md mt-2">{file.description}</p>
                      <div className="p-3">
                        <Button className="text-white font-medium text-sm font-pop" color="danger" onClick={() => deleteContent({...file, bucket: 'files'})}>Delete File</Button>
                      </div>
                    </div>
                  )
                })}
              </div>
            </div>
          </div>
        </>
      }
      </Container>
    </DefaultLayout>
  );
}
 